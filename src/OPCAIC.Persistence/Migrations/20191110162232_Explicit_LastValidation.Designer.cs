// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OPCAIC.Domain.ValueObjects;
using OPCAIC.Persistence;

namespace OPCAIC.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20191110162232_Explicit_LastValidation")]
    partial class Explicit_LastValidation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<long>("TournamentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.Email", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RecipientEmail")
                        .HasColumnType("text");

                    b.Property<int>("RemainingAttempts")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("TemplateName")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.EmailTemplate", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("text");

                    b.Property<string>("BodyTemplate")
                        .HasColumnType("text");

                    b.Property<string>("SubjectTemplate")
                        .HasColumnType("text");

                    b.HasKey("Name", "LanguageCode");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.Game", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConfigurationSchema")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("DefaultTournamentImageOverlay")
                        .HasColumnType("real");

                    b.Property<string>("DefaultTournamentImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("DefaultTournamentThemeColor")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<long>("MaxAdditionalFilesSize")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.Match", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<long>("TournamentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.MatchExecution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AdditionalData")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Exception")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Executed")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExecutorResult")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MatchId1")
                        .HasColumnType("bigint");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId1")
                        .IsUnique();

                    b.ToTable("MatchExecutions");
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.Submission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.Property<long>("TournamentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ValidationState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TournamentId", "AuthorId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.SubmissionMatchResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AdditionalData")
                        .HasColumnType("text");

                    b.Property<string>("CompilerResult")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Crashed")
                        .HasColumnType("boolean");

                    b.Property<long>("ExecutionId")
                        .HasColumnType("bigint");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.Property<long>("SubmissionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ExecutionId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("SubmissionsMatchResults");
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.SubmissionParticipation", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubmissionId")
                        .HasColumnType("bigint");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("MatchId", "SubmissionId", "Order");

                    b.HasIndex("SubmissionId");

                    b.ToTable("SubmissionParticipation");
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.SubmissionValidation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CheckerResult")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompilerResult")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Exception")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Executed")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SubmissionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubmissionId1")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ValidatorResult")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubmissionId");

                    b.HasIndex("SubmissionId1")
                        .IsUnique();

                    b.ToTable("SubmissionValidations");
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.Tournament", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Anonymize")
                        .HasColumnType("boolean");

                    b.Property<string>("Availability")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EvaluationFinished")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EvaluationStarted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasAdditionalFiles")
                        .HasColumnType("boolean");

                    b.Property<double?>("ImageOverlay")
                        .HasColumnType("double precision");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<int?>("MatchesPerDay")
                        .HasColumnType("integer");

                    b.Property<long>("MaxSubmissionSize")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("PrivateMatchlog")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RankingStrategy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rules")
                        .HasColumnType("text");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ThemeColor")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.TournamentInvitation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<long>("TournamentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("UserId");

                    b.ToTable("TournamentInvitation");
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.TournamentManager", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("TournamentId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "TournamentId");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentManager");
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.TournamentParticipation", b =>
                {
                    b.Property<long>("TournamentId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ActiveSubmissionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("TournamentId", "UserId");

                    b.HasIndex("ActiveSubmissionId");

                    b.HasIndex("UserId");

                    b.ToTable("TournamentParticipation");
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LocalizationLanguage")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Organization")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("WantsEmailNotifications")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("OPCAIC.Domain.Enumerations.LocalizationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LocalizationLanguage");
                });

            modelBuilder.Entity("OPCAIC.Domain.Enums.GameType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GameType");
                });

            modelBuilder.Entity("OPCAIC.Domain.ValueObjects.MenuItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("TournamentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("MenuItem");

                    b.HasDiscriminator<string>("Type");
                });

            modelBuilder.Entity("OPCAIC.Domain.ValueObjects.DocumentLinkMenuItem", b =>
                {
                    b.HasBaseType("OPCAIC.Domain.ValueObjects.MenuItem");

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint");

                    b.HasIndex("DocumentId");

                    b.HasDiscriminator().HasValue("DocumentLink");
                });

            modelBuilder.Entity("OPCAIC.Domain.ValueObjects.ExternalUrlMenuItem", b =>
                {
                    b.HasBaseType("OPCAIC.Domain.ValueObjects.MenuItem");

                    b.Property<string>("ExternalLink")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("Text")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasDiscriminator().HasValue("ExternalUrl");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("OPCAIC.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("OPCAIC.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("OPCAIC.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("OPCAIC.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OPCAIC.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("OPCAIC.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.Document", b =>
                {
                    b.HasOne("OPCAIC.Domain.Entities.Tournament", "Tournament")
                        .WithMany("Documents")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.Match", b =>
                {
                    b.HasOne("OPCAIC.Domain.Entities.Tournament", "Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.MatchExecution", b =>
                {
                    b.HasOne("OPCAIC.Domain.Entities.Match", "Match")
                        .WithMany("Executions")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OPCAIC.Domain.Entities.Match", null)
                        .WithOne("LastExecution")
                        .HasForeignKey("OPCAIC.Domain.Entities.MatchExecution", "MatchId1");
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.Submission", b =>
                {
                    b.HasOne("OPCAIC.Domain.Entities.User", "Author")
                        .WithMany("Submissions")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OPCAIC.Domain.Entities.Tournament", "Tournament")
                        .WithMany("Submissions")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OPCAIC.Domain.Entities.TournamentParticipation", "TournamentParticipation")
                        .WithMany("Submissions")
                        .HasForeignKey("TournamentId", "AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.SubmissionMatchResult", b =>
                {
                    b.HasOne("OPCAIC.Domain.Entities.MatchExecution", "Execution")
                        .WithMany("BotResults")
                        .HasForeignKey("ExecutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OPCAIC.Domain.Entities.Submission", "Submission")
                        .WithMany()
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.SubmissionParticipation", b =>
                {
                    b.HasOne("OPCAIC.Domain.Entities.Match", "Match")
                        .WithMany("Participations")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OPCAIC.Domain.Entities.Submission", "Submission")
                        .WithMany("Participations")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.SubmissionValidation", b =>
                {
                    b.HasOne("OPCAIC.Domain.Entities.Submission", "Submission")
                        .WithMany("Validations")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OPCAIC.Domain.Entities.Submission", null)
                        .WithOne("LastValidation")
                        .HasForeignKey("OPCAIC.Domain.Entities.SubmissionValidation", "SubmissionId1");
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.Tournament", b =>
                {
                    b.HasOne("OPCAIC.Domain.Entities.Game", "Game")
                        .WithMany("Tournaments")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OPCAIC.Domain.Entities.User", "Owner")
                        .WithMany("OwnedTournaments")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.TournamentInvitation", b =>
                {
                    b.HasOne("OPCAIC.Domain.Entities.Tournament", "Tournament")
                        .WithMany("Invitations")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OPCAIC.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.TournamentManager", b =>
                {
                    b.HasOne("OPCAIC.Domain.Entities.Tournament", "Tournament")
                        .WithMany("Managers")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OPCAIC.Domain.Entities.User", "User")
                        .WithMany("ManagerOfTournaments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OPCAIC.Domain.Entities.TournamentParticipation", b =>
                {
                    b.HasOne("OPCAIC.Domain.Entities.Submission", "ActiveSubmission")
                        .WithMany()
                        .HasForeignKey("ActiveSubmissionId");

                    b.HasOne("OPCAIC.Domain.Entities.Tournament", "Tournament")
                        .WithMany("Participants")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OPCAIC.Domain.Entities.User", "User")
                        .WithMany("TournamentParticipations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OPCAIC.Domain.ValueObjects.MenuItem", b =>
                {
                    b.HasOne("OPCAIC.Domain.Entities.Tournament", null)
                        .WithMany("MenuItems")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OPCAIC.Domain.ValueObjects.DocumentLinkMenuItem", b =>
                {
                    b.HasOne("OPCAIC.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
